"""Rename name to username in users table

Revision ID: a732a375b7fa
Revises:
Create Date: 2025-01-21 11:31:35.670566

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "a732a375b7fa"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Add the new 'username' column with a temporary default value
    op.add_column(
        "users",
        sa.Column(
            "username", sa.String(), nullable=False, server_default="temp_username"
        ),
    )

    # If you want to copy data from 'name' to 'username', add a raw SQL update here
    op.execute("UPDATE users SET username = name")

    # Drop the default constraint from 'username' after updating
    op.alter_column("users", "username", server_default=None)

    # Ensure 'email' remains not nullable
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=False)

    # Drop the 'name' column after ensuring all data has been migrated
    op.drop_index("ix_users_name", table_name="users")
    op.drop_column("users", "name")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_index("ix_users_name", "users", ["name"], unique=False)
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_column("users", "username")
    # ### end Alembic commands ###
